Started off the raytracer by implementing ray-sphere intersection and ray-square intersection.
Then we implemented the ray casting and phong lighting model.
From here is part 2.

*************
* Mandatory *
*************

Reflection - First part was reflection. This was implemented by taking the normal of the intersection on
             and producing the reflected ray dir, using the intersection point as the new origin of the ray.
             An issue we came up against was the ray origin conflicted with the object and we got the same 
             intersection back. To work around this issue, we added a tiny epsilon to the ray origin along
             it's direction. (Both partners implemented)

Shadow - Then we had the same issue with shadow but hadn't thought of the workaround yet. For shadow we ask
         if from the light's origin, to the intersection, if we hit another intersection, and it isn't us,
         then we're in shadow. (Jiecao implemented)

**********
* Choice *
**********
Anti Aliasing - For anti aliasing, we shoot out multiple rays from the eye location using a random stochastic
                method for choosing ray direction. For each of these rays, we average the colours and that
                becomes the pixels colour (Jiecao implemented)

Texture Mapping - For texture mapping we define materials as a class instead. Whenever we determine that an
                  intersection with an object has happened, we ask the material for the material properties
                  at a t and s value. This includes the ambient, diffuse, specular, shiny, and even 
                  refractive properties of the object. (Jiecao started, Tomasz finished)

Cylinder - For the cylinder object, we first must consider the intersection of a ray and an infinite cylinder.
           This produces the walls of our cylinder, but we want to still bound the cylinder to a top and a
           bottom of the cylinder, so if we determine that the z value of the intersection is above 0.5, 
           we must consider the plane at (0, 0, 0.5). We determine the intersection of the ray with the plane.
           If this produces a point which follows the constraint x^2 + y^2 < 1, we're at the top of the 
           cylinder. Same process follows for bottom of cylinder. (Tomasz implemented)

Area Light - An area light source was produced by setting a light position and sampling around the light source
             when determining shadows. Just like anti-aliasing, where we send out multiple rays from the
             ray origin, we shoot out multiple rays from the intersection point to the light source. We average
             the result based on how many rays result in shadows. This results in a smoother transition
             between non-shadow and shadow. (Tomasz implemented)

Refraction - In the materials property we defined an isRefractive and a refraction index of each object. We use
             these values to determine if we should refract light or reflect it. If we refract light, we don't
             inherit any of the colour of the refractive object. We also need to be careful when we're exiting
             the refractive object and make sure we're refracting in the right direction. 
             (Jiecao started, Tomasz resolved bugs, Jiecao finished)
